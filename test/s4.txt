FeatureScript 1174;
import(path : "onshape/std/geometry.fs", version : "1174.0");

annotation { "Feature Type Name" : "Sproket"}
export const Sproket = defineFeature(function(context is Context, id is Id, definition is map)
    precondition
    {
        annotation { "Name" : "Select origin position" }
        definition.centerPoint is boolean;
        
        annotation { "Name" : "Plane", "Filter" : EntityType.FACE, "MaxNumberOfPicks" : 1 }
        definition.SelectedPlane is Query;

        if (definition.centerPoint == true)
        {
            annotation { "Name" : "Sketch vertex for center", "Filter" : EntityType.VERTEX && SketchObject.YES, "MaxNumberOfPicks" : 1 }
            definition.center is Query;
        }
        
        annotation { "Name" : "Number of Teeth" }
        isInteger(definition.N, TEETH_BOUNDS);
    }
    {
        // Important Variable definitions
        var pitch = 1/4;
        var PD = pitch / sin((180 / definition.N) * degree) * inch;
        var Dr = .13 * inch;
        var Ds = 1.0005 * Dr + .003 * inch;
        var E = 1.3025 * Dr + 0.0015 * inch;
        var M = 0.8 * Dr * cos((35 +60 / definition.N) * degree);
        var T = 0.8 * Dr * sin((35 +60 / definition.N) * degree);
        var angleA = (35 + 60 / definition.N) * degree;
        var angleB = (18 - 56 / definition.N) * degree;
        var W = 1.4 * Dr * cos((180 / definition.N) * degree);
        var V = 1.4 * Dr * sin((180 / definition.N) * degree);
        var F = Dr * (0.8 * cos((18 - 56 / definition.N) * degree) + 1.4 * cos((17 - 64 / definition.N) * degree) - 1.3025) - .0015 * inch;
                        
        // if no center vertex selected build gear on the front plane at the origin
        var location = vector(0, 0, 0) * meter;
        var sketchPlane = plane(location, vector(0, -1, 0), vector(1, 0, 0));
        sketchPlane = evOwnerSketchPlane(context, { "entity" : definition.center });
        // else find location of selected vertex and its sketch plane and create a new sketch for the gear profile
        if (definition.centerPoint)
        {
            location = evVertexPoint(context, { "vertex" : definition.center });
            sketchPlane = evOwnerSketchPlane(context, { "entity" : definition.center });
        }
        var plane = evPlane(context, {
            "face" : definition.SelectedPlane
            });
        var translate = vector(0, 0, 0);
        if (definition.centerPoint == true)
        {
            if (isPointOnPlane(evVertexPoint(context, { "vertex" : definition.center }), evPlane(context, { "face" : definition.SelectedPlane })) == false)
                throw regenError("Point not on selected plane", ["SelectedPoint"]);
            translate = evVertexPoint(context, { "vertex" : definition.center });
        }
        else
        {
            //translate = evVertexPoint(context, { "vertex" : plane.origin });
            translate = plane.origin;
            // plane.origin += evVertexPoint(context, { "vertex" : definition.center }) - plane.origin;
            translate[0] = 0 * inch;
            translate[1] = 0 * inch;
        }
        translate = vector(translate[0], translate[2]);
        // create the outer diameter circle
        const gearSketch = newSketchOnPlane(context, id + "gearSketch", {"sketchPlane" : sketchPlane});
        // const center = worldToPlane(sketchPlane, location);
        const center = worldToPlane(sketchPlane, plane.origin);
        // draw point C
        var pointC = vector(M / (1 * inch), (PD / 2 + T) / (1 * inch), 1);
        // draw point X
        var pointX = vector(Ds / (2 * inch) * cos(180 * degree + angleA), PD / (2 * inch) + Ds / (2 * inch) * sin(180 * degree + angleA));
        // draw point Y
        var pointY = vector((pointC[0] * inch + E * cos(180 * degree - angleB + angleA)) / (1 * inch), (pointC[1] * inch + E * sin(180 * degree - angleB + angleA)) / (1 * inch));
        // draw point XY
        var pointXY = vector((pointC[0] * inch + E * cos(180 * degree - angleB / 2 + angleA)) / (1 * inch), (pointC[1] * inch + E * sin(180 * degree - angleB / 2 + angleA)) / (1 * inch));
        // draw point Z        
        var pointZ = vector((pointC[0] * inch - E / sin(90 * degree - angleA + angleB)) / (1 * inch), pointC[1]);
        // draw point B to draw another circle tangent to line YZ.
        var pointB = vector(-W / (1 * inch), (PD / 2 - V) / (1 * inch));
        // draw point T to draw toothTip line.
        var pointT = vector((PD * cos((90 + 180 / definition.N) * degree)) / (1 * inch), (PD * sin((90 + 180 / definition.N) * degree)) / (1 * inch));
        var pointL = lineCircleIntersect(pointT, center / (1 * inch), pointB, F / (1 * inch), 2);
        pointL = vector(pointL[0], pointL[1]);
        // draw point BYZ which is tip point of tooth tip.
        var pointBYZ = lineCircleIntersect(pointZ, pointY, pointB, F / (1 * inch), 0);
        pointBYZ = vector(pointBYZ[0], pointBYZ[1]);        
        // draw point LBYZ
        var pointLBYZ = midPointArc2Points(pointL, pointBYZ, pointB, F / (1 * inch));
        pointLBYZ = vector(pointLBYZ[0], pointLBYZ[1]);
        // draw point bottom small circle
        var pointCB = vector(0, (PD / 2 - Ds / 2) / (1 * inch));
        
        // var pointMX = vector(-pointX[0] + 2 * plane.origin[0] / (1 * inch), pointX[1]);
        // var pointMY = vector(-pointY[0] + 2 * plane.origin[0] / (1 * inch), pointY[1]);
        // var pointMXY = vector(-pointXY[0] + 2 * plane.origin[0] / (1 * inch), pointXY[1]);
        // var pointMBYZ = vector(-pointBYZ[0] + 2 * plane.origin[0] / (1 * inch), pointBYZ[1]);
        // var pointML = vector(-pointL[0] + 2 * plane.origin[0] / (1 * inch), pointL[1]);
        // var pointMLBYZ = vector(-pointLBYZ[0] + 2 * plane.origin[0] / (1 * inch), pointLBYZ[1]);
       
        var pointMX = vector(-pointX[0], pointX[1]);
        var pointMY = vector(-pointY[0], pointY[1]);
        var pointMXY = vector(-pointXY[0], pointXY[1]);
        var pointMBYZ = vector(-pointBYZ[0], pointBYZ[1]);
        var pointML = vector(-pointL[0], pointL[1]);
        var pointMLBYZ = vector(-pointLBYZ[0], pointLBYZ[1]);

        const axis = line(vector(0, 0, 0) * inch, vector(0, 0, 1));
        // const axis = line(vector(0, 0, 0) * inch, vector(0, 0, 1));
        const full = 360 * degree;
        var arc1str = "arc1";
        var arc2str = "arc2";
        var line3str = "line3";
        var arc4str = "arc4";
        var line5str = "line5";
        var arc6str = "arc6";
        var arc7str = "arc7";

        // Make 2D variable to 3D
        const pointX3D = vector(pointX[0], pointX[1], 0) * inch;
        const pointXY3D = vector(pointXY[0], pointXY[1], 0) * inch;
        const pointY3D = vector(pointY[0], pointY[1], 0) * inch;
        const pointL3D = vector(pointL[0], pointL[1], 0) * inch;
        const pointLBYZ3D = vector(pointLBYZ[0], pointLBYZ[1], 0) * inch;
        const pointBYZ3D = vector(pointBYZ[0], pointBYZ[1], 0) * inch;
        const pointCB3D = vector(pointCB[0], pointCB[1], 0) * inch;
        const pointMX3D = vector(pointMX[0], pointMX[1], 0) * inch;
        const pointMY3D = vector(pointMY[0], pointMY[1], 0) * inch;
        const pointMXY3D = vector(pointMXY[0], pointMXY[1], 0) * inch;
        const pointMBYZ3D = vector(pointMBYZ[0], pointMBYZ[1], 0) * inch;
        const pointML3D = vector(pointML[0], pointML[1], 0) * inch;
        const pointMLBYZ3D = vector(pointMLBYZ[0], pointMLBYZ[1], 0) * inch;
        for (var i = 0; i < definition.N; i += 1)
        {
            const rot = rotationAround(axis, full * (i / definition.N));
            
            // apply rotate angle
            const rX = rot * pointX3D;
            const rY = rot * pointY3D;
            const rXY = rot * pointXY3D;
            const rL = rot * pointL3D;
            const rLBYZ = rot * pointLBYZ3D;
            const rBYZ = rot * pointBYZ3D;
            const rCB = rot * pointCB3D;
            const rMX = rot * pointMX3D;
            const rMY = rot * pointMY3D;
            const rMXY = rot * pointMXY3D;
            const rMBYZ = rot * pointMBYZ3D;
            const rML = rot * pointML3D;
            const rMLBYZ = rot * pointMLBYZ3D;
                
            // draw arc XY
            skArc(gearSketch, arc1str ~ i, {
                    "start" : vector(rX[0] + translate[0], rX[1] + translate[1]),
                    "mid" : vector(rXY[0] + translate[0], rXY[1] + translate[1]),
                    "end" : vector(rY[0] + translate[0], rY[1] + translate[1])
            });
            // draw arc LBYZ
            skArc(gearSketch, arc2str ~ i, {
                    "start" : vector(rL[0] + translate[0], rL[1] + translate[1]),
                    "mid" : vector(rLBYZ[0] + translate[0], rLBYZ[1] + translate[1]),
                    "end" : vector(rBYZ[0] + translate[0], rBYZ[1] + translate[1])
            });
            // draw line BYZY
            skLineSegment(gearSketch, line3str ~ i, {
                "start" : vector(rBYZ[0] + translate[0], rBYZ[1] + translate[1]),
                "end" : vector(rY[0] + translate[0], rY[1] + translate[1])
            });
            // draw arc XMX
            skArc(gearSketch, arc4str ~ i, {
                    "start" : vector(rX[0] + translate[0], rX[1] + translate[1]),
                    "mid" : vector(rCB[0] + translate[0], rCB[1] + translate[1]),
                    "end" : vector(rMX[0] + translate[0], rMX[1] + translate[1])});
            // draw arc MXY
            skArc(gearSketch, line5str ~ i, {
                    "start" : vector(rMX[0] + translate[0], rMX[1] + translate[1]),
                    "mid" : vector(rMXY[0] + translate[0], rMXY[1] + translate[1]),
                    "end" : vector(rMY[0] + translate[0], rMY[1] + translate[1])});
            // draw line BYZY
            skLineSegment(gearSketch, arc6str ~ i, {
                "start" : vector(rMBYZ[0] + translate[0], rMBYZ[1] + translate[1]),
                "end" : vector(rMY[0] + translate[0], rMY[1] + translate[1])});
            // draw arc MLBYZ
            skArc(gearSketch, arc7str ~ i, {
                    "start" : vector(rML[0] + translate[0], rML[1] + translate[1]),
                    "mid" : vector(rMLBYZ[0] + translate[0], rMLBYZ[1] + translate[1]),
                    "end" : vector(rMBYZ[0] + translate[0], rMBYZ[1] + translate[1])});
            
            // // draw arc XY
            // skArc(gearSketch, arc1str ~ i, {
            //         "start" : vector(rX[0], rX[1]),
            //         "mid" : vector(rXY[0], rXY[1]),
            //         "end" : vector(rY[0], rY[1])
            // });
            // // draw arc LBYZ
            // skArc(gearSketch, arc2str ~ i, {
            //         "start" : vector(rL[0], rL[1]),
            //         "mid" : vector(rLBYZ[0], rLBYZ[1]),
            //         "end" : vector(rBYZ[0], rBYZ[1])
            // });
            // // draw line BYZY
            // skLineSegment(gearSketch, line3str ~ i, {
            //     "start" : vector(rBYZ[0], rBYZ[1]),
            //     "end" : vector(rY[0], rY[1])
            // });
            // // draw arc XMX
            // skArc(gearSketch, arc4str ~ i, {
            //         "start" : vector(rX[0], rX[1]),
            //         "mid" : vector(rCB[0], rCB[1]),
            //         "end" : vector(rMX[0], rMX[1])});
            // // draw arc MXY
            // skArc(gearSketch, line5str ~ i, {
            //         "start" : vector(rMX[0], rMX[1]),
            //         "mid" : vector(rMXY[0], rMXY[1]),
            //         "end" : vector(rMY[0], rMY[1])});
            // // draw line BYZY
            // skLineSegment(gearSketch, arc6str ~ i, {
            //     "start" : vector(rMBYZ[0], rMBYZ[1]),
            //     "end" : vector(rMY[0], rMY[1])});
            // // draw arc MLBYZ
            // skArc(gearSketch, arc7str ~ i, {
            //         "start" : vector(rML[0], rML[1]),
            //         "mid" : vector(rMLBYZ[0], rMLBYZ[1]),
            //         "end" : vector(rMBYZ[0], rMBYZ[1])});    
        }
        skSolve(gearSketch);
        // opExtrude(context, id + "extrude1", {
        //         "entities" : qSketchRegion(id + "gearSketch", true),
        //         "direction" : sketchPlane.normal,
        //         "endBound" : BoundingType.BLIND,
        //         "endDepth" : W
        // });    
        
    });

// secant = 0 : one intersection
// secant = 1 : two intersection, 1st point
// secant = 2 : one intersection, 2nd point
export  function lineCircleIntersect(p1, p2, c, r, secant)
{
    var pt1 = vector(p1[0] - c[0], p1[1] - c[1]);
    var pt2 = vector(p2[0] - c[0], p2[1] - c[1]);
    var dx = pt2[0] - pt1[0];
    var dy = pt2[1] - pt1[1];
    var dr = sqrt(dx ^ 2 + dy ^ 2);
    var D = pt1[0] * pt2[1] - pt2[0] * pt1[1];
    var x = 1;
    var y = 1;
    if (secant == 0)
    {
        x = c[0] + D * dy / dr ^ 2;
        y = c[1] - D * dx / dr ^ 2;
    }
    else if (secant == 1)
    {
        x = c[0] + (D * dy - (dy < 0 ? -1 : 1) * dx * sqrt(r ^ 2 * dr ^ 2 - D ^ 2)) / dr ^ 2;
        y = c[1] + (-D * dx - (dy < 0 ? -dy : dy) * sqrt(r ^ 2 * dr ^ 2 - D ^ 2)) / dr ^ 2;
    }
    else if (secant == 2)
    {
        x = c[0] + (D * dy + (dy < 0 ? -1 : 1) * dx * sqrt(r ^ 2 * dr ^ 2 - D ^ 2)) / dr ^ 2;
        y = c[1] + (-D * dx + (dy < 0 ? -dy : dy) * sqrt(r ^ 2 * dr ^ 2 - D ^ 2)) / dr ^ 2;
    }
    return ([x, y]);
}

// find mid point from 2 end points of arc
export  function midPointArc2Points(p1, p2, c, r)
{
    var px = vector(p1[0] - c[0], p1[1] - c[1]);
    var py = vector(p2[0] - c[0], p2[1] - c[1]);
    var theta = atan2(px[1] + py[1], px[0] + py[0]);
    var x = (c[0] + r * cos(theta));
    var y = (c[1] + r * sin(theta));
    return ([x, y]);
}

const TEETH_BOUNDS =
{
    (unitless) : [5, 30, 250]
} as IntegerBoundSpec;
